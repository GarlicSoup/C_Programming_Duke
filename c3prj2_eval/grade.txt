Grading at Fri Mar 26 02:51:29 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==275== Memcheck, a memory error detector
==275== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==275== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==275== Command: ./test-eval inp.1.txt
==275== Parent PID: 274
==275== 
==275== Invalid read of size 8
==275==    at 0x4016D3: card_ptr_comp (eval.c:9)
==275==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==275==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==275==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==275==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==275==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==275==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==275==    by 0x4E7369E: qsort_r (msort.c:297)
==275==    by 0x401D3E: compare_hands (eval.c:161)
==275==    by 0x402CAF: main (test-eval.c:124)
==275==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==275==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==275==    by 0x401282: add_card_to (deck-c4.c:29)
==275==    by 0x403423: hand_from_string (input.c:49)
==275==    by 0x402C83: main (test-eval.c:122)
==275== 
==275== Invalid read of size 4
==275==    at 0x4016D6: card_ptr_comp (eval.c:9)
==275==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==275==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==275==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==275==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==275==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==275==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==275==    by 0x4E7369E: qsort_r (msort.c:297)
==275==    by 0x401D3E: compare_hands (eval.c:161)
==275==    by 0x402CAF: main (test-eval.c:124)
==275==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==275== 
==275== 
==275== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==275==  Access not within mapped region at address 0x0
==275==    at 0x4016D6: card_ptr_comp (eval.c:9)
==275==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==275==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==275==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==275==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==275==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==275==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==275==    by 0x4E7369E: qsort_r (msort.c:297)
==275==    by 0x401D3E: compare_hands (eval.c:161)
==275==    by 0x402CAF: main (test-eval.c:124)
==275==  If you believe this happened as a result of a stack
==275==  overflow in your program's main thread (unlikely but
==275==  possible), you can try to increase the size of the
==275==  main thread stack using the --main-stacksize= flag.
==275==  The main thread stack size used in this run was 8388608.
==275== 
==275== HEAP SUMMARY:
==275==     in use at exit: 896 bytes in 18 blocks
==275==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==275== 
==275== LEAK SUMMARY:
==275==    definitely lost: 0 bytes in 0 blocks
==275==    indirectly lost: 0 bytes in 0 blocks
==275==      possibly lost: 0 bytes in 0 blocks
==275==    still reachable: 896 bytes in 18 blocks
==275==         suppressed: 0 bytes in 0 blocks
==275== Rerun with --leak-check=full to see details of leaked memory
==275== 
==275== For counts of detected and suppressed errors, rerun with: -v
==275== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==280== Memcheck, a memory error detector
==280== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==280== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==280== Command: ./test-eval inp.2.txt
==280== Parent PID: 279
==280== 
==280== Invalid read of size 8
==280==    at 0x4016D3: card_ptr_comp (eval.c:9)
==280==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==280==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==280==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==280==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==280==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==280==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==280==    by 0x4E7369E: qsort_r (msort.c:297)
==280==    by 0x401D3E: compare_hands (eval.c:161)
==280==    by 0x402CAF: main (test-eval.c:124)
==280==  Address 0x5207170 is 0 bytes after a block of size 48 alloc'd
==280==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==280==    by 0x401282: add_card_to (deck-c4.c:29)
==280==    by 0x403423: hand_from_string (input.c:49)
==280==    by 0x402C83: main (test-eval.c:122)
==280== 
==280== Invalid read of size 4
==280==    at 0x4016D6: card_ptr_comp (eval.c:9)
==280==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==280==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==280==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==280==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==280==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==280==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==280==    by 0x4E7369E: qsort_r (msort.c:297)
==280==    by 0x401D3E: compare_hands (eval.c:161)
==280==    by 0x402CAF: main (test-eval.c:124)
==280==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==280== 
==280== 
==280== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==280==  Access not within mapped region at address 0x0
==280==    at 0x4016D6: card_ptr_comp (eval.c:9)
==280==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==280==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==280==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==280==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==280==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==280==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==280==    by 0x4E7369E: qsort_r (msort.c:297)
==280==    by 0x401D3E: compare_hands (eval.c:161)
==280==    by 0x402CAF: main (test-eval.c:124)
==280==  If you believe this happened as a result of a stack
==280==  overflow in your program's main thread (unlikely but
==280==  possible), you can try to increase the size of the
==280==  main thread stack using the --main-stacksize= flag.
==280==  The main thread stack size used in this run was 8388608.
==280== 
==280== HEAP SUMMARY:
==280==     in use at exit: 880 bytes in 17 blocks
==280==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==280== 
==280== LEAK SUMMARY:
==280==    definitely lost: 0 bytes in 0 blocks
==280==    indirectly lost: 0 bytes in 0 blocks
==280==      possibly lost: 0 bytes in 0 blocks
==280==    still reachable: 880 bytes in 17 blocks
==280==         suppressed: 0 bytes in 0 blocks
==280== Rerun with --leak-check=full to see details of leaked memory
==280== 
==280== For counts of detected and suppressed errors, rerun with: -v
==280== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==285== Memcheck, a memory error detector
==285== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==285== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==285== Command: ./test-eval inp.3.txt
==285== Parent PID: 284
==285== 
==285== Invalid read of size 8
==285==    at 0x4016CA: card_ptr_comp (eval.c:9)
==285==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==285==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==285==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==285==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==285==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==285==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==285==    by 0x4E7369E: qsort_r (msort.c:297)
==285==    by 0x401D3E: compare_hands (eval.c:161)
==285==    by 0x402CAF: main (test-eval.c:124)
==285==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==285==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==285==    by 0x401282: add_card_to (deck-c4.c:29)
==285==    by 0x403423: hand_from_string (input.c:49)
==285==    by 0x402C83: main (test-eval.c:122)
==285== 
==285== Invalid read of size 4
==285==    at 0x4016CD: card_ptr_comp (eval.c:9)
==285==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==285==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==285==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==285==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==285==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==285==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==285==    by 0x4E7369E: qsort_r (msort.c:297)
==285==    by 0x401D3E: compare_hands (eval.c:161)
==285==    by 0x402CAF: main (test-eval.c:124)
==285==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==285== 
==285== 
==285== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==285==  Access not within mapped region at address 0x0
==285==    at 0x4016CD: card_ptr_comp (eval.c:9)
==285==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==285==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==285==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==285==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==285==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==285==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==285==    by 0x4E7369E: qsort_r (msort.c:297)
==285==    by 0x401D3E: compare_hands (eval.c:161)
==285==    by 0x402CAF: main (test-eval.c:124)
==285==  If you believe this happened as a result of a stack
==285==  overflow in your program's main thread (unlikely but
==285==  possible), you can try to increase the size of the
==285==  main thread stack using the --main-stacksize= flag.
==285==  The main thread stack size used in this run was 8388608.
==285== 
==285== HEAP SUMMARY:
==285==     in use at exit: 864 bytes in 16 blocks
==285==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==285== 
==285== LEAK SUMMARY:
==285==    definitely lost: 0 bytes in 0 blocks
==285==    indirectly lost: 0 bytes in 0 blocks
==285==      possibly lost: 0 bytes in 0 blocks
==285==    still reachable: 864 bytes in 16 blocks
==285==         suppressed: 0 bytes in 0 blocks
==285== Rerun with --leak-check=full to see details of leaked memory
==285== 
==285== For counts of detected and suppressed errors, rerun with: -v
==285== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==290== Memcheck, a memory error detector
==290== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==290== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==290== Command: ./test-eval inp.4.txt
==290== Parent PID: 289
==290== 
==290== Invalid read of size 8
==290==    at 0x4016D3: card_ptr_comp (eval.c:9)
==290==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==290==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==290==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==290==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==290==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==290==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==290==    by 0x4E7369E: qsort_r (msort.c:297)
==290==    by 0x401D3E: compare_hands (eval.c:161)
==290==    by 0x402CAF: main (test-eval.c:124)
==290==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==290==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==290==    by 0x401282: add_card_to (deck-c4.c:29)
==290==    by 0x403423: hand_from_string (input.c:49)
==290==    by 0x402C83: main (test-eval.c:122)
==290== 
==290== Invalid read of size 4
==290==    at 0x4016D6: card_ptr_comp (eval.c:9)
==290==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==290==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==290==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==290==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==290==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==290==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==290==    by 0x4E7369E: qsort_r (msort.c:297)
==290==    by 0x401D3E: compare_hands (eval.c:161)
==290==    by 0x402CAF: main (test-eval.c:124)
==290==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==290== 
==290== 
==290== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==290==  Access not within mapped region at address 0x0
==290==    at 0x4016D6: card_ptr_comp (eval.c:9)
==290==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==290==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==290==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==290==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==290==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==290==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==290==    by 0x4E7369E: qsort_r (msort.c:297)
==290==    by 0x401D3E: compare_hands (eval.c:161)
==290==    by 0x402CAF: main (test-eval.c:124)
==290==  If you believe this happened as a result of a stack
==290==  overflow in your program's main thread (unlikely but
==290==  possible), you can try to increase the size of the
==290==  main thread stack using the --main-stacksize= flag.
==290==  The main thread stack size used in this run was 8388608.
==290== 
==290== HEAP SUMMARY:
==290==     in use at exit: 896 bytes in 18 blocks
==290==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==290== 
==290== LEAK SUMMARY:
==290==    definitely lost: 0 bytes in 0 blocks
==290==    indirectly lost: 0 bytes in 0 blocks
==290==      possibly lost: 0 bytes in 0 blocks
==290==    still reachable: 896 bytes in 18 blocks
==290==         suppressed: 0 bytes in 0 blocks
==290== Rerun with --leak-check=full to see details of leaked memory
==290== 
==290== For counts of detected and suppressed errors, rerun with: -v
==290== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==295== Memcheck, a memory error detector
==295== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==295== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==295== Command: ./test-eval inp.5.txt
==295== Parent PID: 294
==295== 
==295== Invalid read of size 8
==295==    at 0x4016CA: card_ptr_comp (eval.c:9)
==295==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==295==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==295==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==295==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==295==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==295==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==295==    by 0x4E7369E: qsort_r (msort.c:297)
==295==    by 0x401D3E: compare_hands (eval.c:161)
==295==    by 0x402CAF: main (test-eval.c:124)
==295==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==295==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==295==    by 0x401282: add_card_to (deck-c4.c:29)
==295==    by 0x403423: hand_from_string (input.c:49)
==295==    by 0x402C83: main (test-eval.c:122)
==295== 
==295== Invalid read of size 4
==295==    at 0x4016CD: card_ptr_comp (eval.c:9)
==295==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==295==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==295==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==295==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==295==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==295==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==295==    by 0x4E7369E: qsort_r (msort.c:297)
==295==    by 0x401D3E: compare_hands (eval.c:161)
==295==    by 0x402CAF: main (test-eval.c:124)
==295==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==295== 
==295== 
==295== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==295==  Access not within mapped region at address 0x0
==295==    at 0x4016CD: card_ptr_comp (eval.c:9)
==295==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==295==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==295==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==295==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==295==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==295==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==295==    by 0x4E7369E: qsort_r (msort.c:297)
==295==    by 0x401D3E: compare_hands (eval.c:161)
==295==    by 0x402CAF: main (test-eval.c:124)
==295==  If you believe this happened as a result of a stack
==295==  overflow in your program's main thread (unlikely but
==295==  possible), you can try to increase the size of the
==295==  main thread stack using the --main-stacksize= flag.
==295==  The main thread stack size used in this run was 8388608.
==295== 
==295== HEAP SUMMARY:
==295==     in use at exit: 864 bytes in 16 blocks
==295==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==295== 
==295== LEAK SUMMARY:
==295==    definitely lost: 0 bytes in 0 blocks
==295==    indirectly lost: 0 bytes in 0 blocks
==295==      possibly lost: 0 bytes in 0 blocks
==295==    still reachable: 864 bytes in 16 blocks
==295==         suppressed: 0 bytes in 0 blocks
==295== Rerun with --leak-check=full to see details of leaked memory
==295== 
==295== For counts of detected and suppressed errors, rerun with: -v
==295== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==300== Memcheck, a memory error detector
==300== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==300== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==300== Command: ./test-eval inp.6.txt
==300== Parent PID: 299
==300== 
==300== Invalid read of size 8
==300==    at 0x4016D3: card_ptr_comp (eval.c:9)
==300==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==300==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==300==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==300==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==300==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==300==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==300==    by 0x4E7369E: qsort_r (msort.c:297)
==300==    by 0x401D3E: compare_hands (eval.c:161)
==300==    by 0x402CAF: main (test-eval.c:124)
==300==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==300==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==300==    by 0x401282: add_card_to (deck-c4.c:29)
==300==    by 0x403423: hand_from_string (input.c:49)
==300==    by 0x402C83: main (test-eval.c:122)
==300== 
==300== Invalid read of size 4
==300==    at 0x4016D6: card_ptr_comp (eval.c:9)
==300==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==300==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==300==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==300==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==300==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==300==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==300==    by 0x4E7369E: qsort_r (msort.c:297)
==300==    by 0x401D3E: compare_hands (eval.c:161)
==300==    by 0x402CAF: main (test-eval.c:124)
==300==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==300== 
==300== 
==300== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==300==  Access not within mapped region at address 0x0
==300==    at 0x4016D6: card_ptr_comp (eval.c:9)
==300==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==300==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==300==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==300==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==300==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==300==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==300==    by 0x4E7369E: qsort_r (msort.c:297)
==300==    by 0x401D3E: compare_hands (eval.c:161)
==300==    by 0x402CAF: main (test-eval.c:124)
==300==  If you believe this happened as a result of a stack
==300==  overflow in your program's main thread (unlikely but
==300==  possible), you can try to increase the size of the
==300==  main thread stack using the --main-stacksize= flag.
==300==  The main thread stack size used in this run was 8388608.
==300== 
==300== HEAP SUMMARY:
==300==     in use at exit: 896 bytes in 18 blocks
==300==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==300== 
==300== LEAK SUMMARY:
==300==    definitely lost: 0 bytes in 0 blocks
==300==    indirectly lost: 0 bytes in 0 blocks
==300==      possibly lost: 0 bytes in 0 blocks
==300==    still reachable: 896 bytes in 18 blocks
==300==         suppressed: 0 bytes in 0 blocks
==300== Rerun with --leak-check=full to see details of leaked memory
==300== 
==300== For counts of detected and suppressed errors, rerun with: -v
==300== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==305== Memcheck, a memory error detector
==305== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==305== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==305== Command: ./test-eval inp.7.txt
==305== Parent PID: 304
==305== 
==305== Invalid read of size 8
==305==    at 0x4016D3: card_ptr_comp (eval.c:9)
==305==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==305==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==305==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==305==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==305==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==305==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==305==    by 0x4E7369E: qsort_r (msort.c:297)
==305==    by 0x401D3E: compare_hands (eval.c:161)
==305==    by 0x402CAF: main (test-eval.c:124)
==305==  Address 0x520cf30 is 0 bytes after a block of size 48 alloc'd
==305==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==305==    by 0x401282: add_card_to (deck-c4.c:29)
==305==    by 0x403423: hand_from_string (input.c:49)
==305==    by 0x402C83: main (test-eval.c:122)
==305== 
==305== Invalid read of size 4
==305==    at 0x4016D6: card_ptr_comp (eval.c:9)
==305==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==305==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==305==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==305==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==305==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==305==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==305==    by 0x4E7369E: qsort_r (msort.c:297)
==305==    by 0x401D3E: compare_hands (eval.c:161)
==305==    by 0x402CAF: main (test-eval.c:124)
==305==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==305== 
==305== 
==305== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==305==  Access not within mapped region at address 0x0
==305==    at 0x4016D6: card_ptr_comp (eval.c:9)
==305==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==305==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==305==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==305==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==305==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==305==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==305==    by 0x4E7369E: qsort_r (msort.c:297)
==305==    by 0x401D3E: compare_hands (eval.c:161)
==305==    by 0x402CAF: main (test-eval.c:124)
==305==  If you believe this happened as a result of a stack
==305==  overflow in your program's main thread (unlikely but
==305==  possible), you can try to increase the size of the
==305==  main thread stack using the --main-stacksize= flag.
==305==  The main thread stack size used in this run was 8388608.
==305== 
==305== HEAP SUMMARY:
==305==     in use at exit: 896 bytes in 18 blocks
==305==   total heap usage: 324 allocs, 306 frees, 15,296 bytes allocated
==305== 
==305== LEAK SUMMARY:
==305==    definitely lost: 0 bytes in 0 blocks
==305==    indirectly lost: 0 bytes in 0 blocks
==305==      possibly lost: 0 bytes in 0 blocks
==305==    still reachable: 896 bytes in 18 blocks
==305==         suppressed: 0 bytes in 0 blocks
==305== Rerun with --leak-check=full to see details of leaked memory
==305== 
==305== For counts of detected and suppressed errors, rerun with: -v
==305== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==310== Memcheck, a memory error detector
==310== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==310== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==310== Command: ./test-eval inp.8.txt
==310== Parent PID: 309
==310== 
==310== Invalid read of size 8
==310==    at 0x4016D3: card_ptr_comp (eval.c:9)
==310==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==310==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==310==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==310==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==310==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==310==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==310==    by 0x4E7369E: qsort_r (msort.c:297)
==310==    by 0x401D3E: compare_hands (eval.c:161)
==310==    by 0x402CAF: main (test-eval.c:124)
==310==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==310==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==310==    by 0x401282: add_card_to (deck-c4.c:29)
==310==    by 0x403423: hand_from_string (input.c:49)
==310==    by 0x402C83: main (test-eval.c:122)
==310== 
==310== Invalid read of size 4
==310==    at 0x4016D6: card_ptr_comp (eval.c:9)
==310==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==310==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==310==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==310==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==310==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==310==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==310==    by 0x4E7369E: qsort_r (msort.c:297)
==310==    by 0x401D3E: compare_hands (eval.c:161)
==310==    by 0x402CAF: main (test-eval.c:124)
==310==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==310== 
==310== 
==310== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==310==  Access not within mapped region at address 0x0
==310==    at 0x4016D6: card_ptr_comp (eval.c:9)
==310==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==310==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==310==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==310==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==310==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==310==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==310==    by 0x4E7369E: qsort_r (msort.c:297)
==310==    by 0x401D3E: compare_hands (eval.c:161)
==310==    by 0x402CAF: main (test-eval.c:124)
==310==  If you believe this happened as a result of a stack
==310==  overflow in your program's main thread (unlikely but
==310==  possible), you can try to increase the size of the
==310==  main thread stack using the --main-stacksize= flag.
==310==  The main thread stack size used in this run was 8388608.
==310== 
==310== HEAP SUMMARY:
==310==     in use at exit: 896 bytes in 18 blocks
==310==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==310== 
==310== LEAK SUMMARY:
==310==    definitely lost: 0 bytes in 0 blocks
==310==    indirectly lost: 0 bytes in 0 blocks
==310==      possibly lost: 0 bytes in 0 blocks
==310==    still reachable: 896 bytes in 18 blocks
==310==         suppressed: 0 bytes in 0 blocks
==310== Rerun with --leak-check=full to see details of leaked memory
==310== 
==310== For counts of detected and suppressed errors, rerun with: -v
==310== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==315== Memcheck, a memory error detector
==315== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==315== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==315== Command: ./test-eval inp.9.txt
==315== Parent PID: 314
==315== 
==315== Invalid read of size 8
==315==    at 0x4016CA: card_ptr_comp (eval.c:9)
==315==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==315==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==315==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==315==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==315==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==315==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==315==    by 0x4E7369E: qsort_r (msort.c:297)
==315==    by 0x401D3E: compare_hands (eval.c:161)
==315==    by 0x402CAF: main (test-eval.c:124)
==315==  Address 0x5206f28 is 0 bytes after a block of size 40 alloc'd
==315==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==315==    by 0x401282: add_card_to (deck-c4.c:29)
==315==    by 0x403423: hand_from_string (input.c:49)
==315==    by 0x402C83: main (test-eval.c:122)
==315== 
==315== Invalid read of size 4
==315==    at 0x4016CD: card_ptr_comp (eval.c:9)
==315==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==315==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==315==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==315==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==315==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==315==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==315==    by 0x4E7369E: qsort_r (msort.c:297)
==315==    by 0x401D3E: compare_hands (eval.c:161)
==315==    by 0x402CAF: main (test-eval.c:124)
==315==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==315== 
==315== 
==315== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==315==  Access not within mapped region at address 0x0
==315==    at 0x4016CD: card_ptr_comp (eval.c:9)
==315==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==315==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==315==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==315==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==315==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==315==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==315==    by 0x4E7369E: qsort_r (msort.c:297)
==315==    by 0x401D3E: compare_hands (eval.c:161)
==315==    by 0x402CAF: main (test-eval.c:124)
==315==  If you believe this happened as a result of a stack
==315==  overflow in your program's main thread (unlikely but
==315==  possible), you can try to increase the size of the
==315==  main thread stack using the --main-stacksize= flag.
==315==  The main thread stack size used in this run was 8388608.
==315== 
==315== HEAP SUMMARY:
==315==     in use at exit: 864 bytes in 16 blocks
==315==   total heap usage: 50 allocs, 34 frees, 9,608 bytes allocated
==315== 
==315== LEAK SUMMARY:
==315==    definitely lost: 0 bytes in 0 blocks
==315==    indirectly lost: 0 bytes in 0 blocks
==315==      possibly lost: 0 bytes in 0 blocks
==315==    still reachable: 864 bytes in 16 blocks
==315==         suppressed: 0 bytes in 0 blocks
==315== Rerun with --leak-check=full to see details of leaked memory
==315== 
==315== For counts of detected and suppressed errors, rerun with: -v
==315== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==320== Memcheck, a memory error detector
==320== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==320== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==320== Command: ./test-eval inp.10.txt
==320== Parent PID: 319
==320== 
==320== Invalid read of size 8
==320==    at 0x4016D3: card_ptr_comp (eval.c:9)
==320==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==320==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==320==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==320==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==320==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==320==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==320==    by 0x4E7369E: qsort_r (msort.c:297)
==320==    by 0x401D3E: compare_hands (eval.c:161)
==320==    by 0x402CAF: main (test-eval.c:124)
==320==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==320==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==320==    by 0x401282: add_card_to (deck-c4.c:29)
==320==    by 0x403423: hand_from_string (input.c:49)
==320==    by 0x402C83: main (test-eval.c:122)
==320== 
==320== Invalid read of size 4
==320==    at 0x4016D6: card_ptr_comp (eval.c:9)
==320==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==320==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==320==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==320==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==320==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==320==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==320==    by 0x4E7369E: qsort_r (msort.c:297)
==320==    by 0x401D3E: compare_hands (eval.c:161)
==320==    by 0x402CAF: main (test-eval.c:124)
==320==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==320== 
==320== 
==320== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==320==  Access not within mapped region at address 0x0
==320==    at 0x4016D6: card_ptr_comp (eval.c:9)
==320==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==320==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==320==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==320==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==320==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==320==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==320==    by 0x4E7369E: qsort_r (msort.c:297)
==320==    by 0x401D3E: compare_hands (eval.c:161)
==320==    by 0x402CAF: main (test-eval.c:124)
==320==  If you believe this happened as a result of a stack
==320==  overflow in your program's main thread (unlikely but
==320==  possible), you can try to increase the size of the
==320==  main thread stack using the --main-stacksize= flag.
==320==  The main thread stack size used in this run was 8388608.
==320== 
==320== HEAP SUMMARY:
==320==     in use at exit: 896 bytes in 18 blocks
==320==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==320== 
==320== LEAK SUMMARY:
==320==    definitely lost: 0 bytes in 0 blocks
==320==    indirectly lost: 0 bytes in 0 blocks
==320==      possibly lost: 0 bytes in 0 blocks
==320==    still reachable: 896 bytes in 18 blocks
==320==         suppressed: 0 bytes in 0 blocks
==320== Rerun with --leak-check=full to see details of leaked memory
==320== 
==320== For counts of detected and suppressed errors, rerun with: -v
==320== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
